plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    forge {
        mixinConfig "wyml.mixins.json"
    }
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
    }
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}


dependencies {
    forge("net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}")
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"
    forgeRuntimeLibrary('blue.endless:jankson:1.2.1')

//    modImplementation("dev.ftb.mods:ftb-library-forge:${rootProject.ftb_library_version}") { transitive = false }
//    modImplementation("dev.ftb.mods:ftb-teams-forge:${rootProject.ftb_teams_version}") { transitive = false }
//    modImplementation("dev.ftb.mods:ftb-ranks-forge:${rootProject.ftb_ranks_version}") { transitive = false }
//    modImplementation("dev.ftb.mods:ftb-chunks-forge:${rootProject.ftb_chunks_version}") { transitive = false }

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    implementation "blue.endless:jankson:1.2.1"
    shadowCommon "blue.endless:jankson:1.2.1"
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    relocate 'blue.endless.jankson', 'net.creeperhost.wyml.blue.endless.jankson'
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveBaseName.set "${rootProject.archives_base_name}-${project.name}-${rootProject.minecraft_version}"
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

//if (ENV.CURSEFORGE_KEY) {
//    curseforge {
//        apiKey = ENV.CURSEFORGE_KEY
//        project {
//            id = project.curseforge_id
//            releaseType = project.curseforge_type
//            addGameVersion "Forge"
//            addGameVersion "1.16.5"
//            mainArtifact(remapJar.archivePath) {
//                displayName "$rootProject.mod_version [Forge]"
//            }
//            relations {
//                requiredDependency 'architectury-forge'
//                optionalDependency 'ftb-chunks-forge'
//            }
//            changelog = getGitChangelog
//            changelogType = 'markdown'
//        }
//    }
//}
