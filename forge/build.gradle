plugins {
    id "com.github.johnrengelman.shadow" version "7.0.0"
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

loom {
    forge {
        mixinConfig "wyml.mixins.json"
    }
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "me.shedaniel:architectury-forge:${rootProject.architectury_version}"
    modImplementation("dev.ftb.mods:ftb-library-forge:${rootProject.ftb_library_version}") { transitive = false }
    modImplementation("dev.ftb.mods:ftb-teams-forge:${rootProject.ftb_teams_version}") { transitive = false }
    modImplementation("dev.ftb.mods:ftb-ranks-forge:${rootProject.ftb_ranks_version}") { transitive = false }
    modImplementation("dev.ftb.mods:ftb-chunks-forge:${rootProject.ftb_chunks_version}") { transitive = false }

    modImplementation "dev.latvian.mods:rhino:${rootProject.rhino_version}"
    modImplementation "dev.latvian.mods:kubejs-forge:${rootProject.kubejs_version}"

    common(project(path: ":common", configuration: "dev")) {
        transitive = false
    }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) {
        transitive = false
    }

    implementation "blue.endless:jankson:1.2.1"
    shadowCommon "blue.endless:jankson:1.2.1"
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    relocate 'blue.endless.jankson', 'net.creeperhost.wyml.blue.endless.jankson'
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier "forge"
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}